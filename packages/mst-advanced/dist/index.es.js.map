{"version":3,"file":"index.es.js","sources":["../src/hooks/use-mst.ts","../src/hooks/use-query.ts","../src/create-query-model.ts","../src/create-list-model.ts"],"sourcesContent":["import { useEffect, useMemo } from 'react';\nimport { destroy, Instance, IAnyModelType } from 'mobx-state-tree';\n\ntype UseMstConfigFactory<M extends IAnyModelType> = () => Parameters<M['create']>;\n\nexport const useMst = <M extends IAnyModelType>(\n  Model: M,\n  configFactory?: UseMstConfigFactory<M>,\n  deps: React.DependencyList = [],\n): Instance<M> => {\n  const model = useMemo(() => {\n    return Model.create(...(configFactory?.() ?? []));\n  }, [Model, ...deps]);\n\n  useEffect(() => () => destroy(model), [model]);\n\n  return model;\n};\n","import { useEffect, useRef } from 'react';\nimport { ModelProperties, IModelType } from 'mobx-state-tree';\nimport { isEqual } from 'lodash';\n\nimport { useMst } from './use-mst';\n\nexport const useQuery = <PROPS extends ModelProperties, OTHERS, CustomC, CustomS>(\n  Model: IModelType<PROPS, OTHERS, CustomC, CustomS>,\n  params?: unknown,\n) => {\n  const ref = useRef<{\n    params?: unknown;\n    abortController?: AbortController;\n  }>({\n    params: {},\n  });\n\n  const store = useMst(Model);\n  const { fetchData } = store;\n\n  useEffect(() => {\n    return () => {\n      ref.current.abortController?.abort();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!isEqual(params, ref.current.params)) {\n      ref.current.params = params;\n      ref.current.abortController?.abort();\n      ref.current.abortController = new AbortController();\n      fetchData(ref.current.params, ref.current.abortController.signal);\n    }\n  }, [params]);\n\n  return store;\n};\n","import { types, flow, toGenerator, ModelProperties, IModelType, Instance } from 'mobx-state-tree';\n\nexport enum RequestStatus {\n  PENDING = 'pending',\n  SUCCESS = 'success',\n  ERROR = 'error',\n}\n\nexport const createQueryModel = <\n  PROPS extends ModelProperties,\n  OTHERS,\n  CustomC,\n  CustomS,\n  Response,\n>({\n  Model,\n  onQuery,\n  onResult,\n}: {\n  Model: IModelType<PROPS, OTHERS, CustomC, CustomS>;\n  onQuery: (signal: AbortSignal, params?: unknown) => Promise<Response>;\n  onResult: (t: Instance<typeof Model>, res: Response) => void;\n}) => {\n  return Model.props({\n    errMsg: types.maybeNull(types.frozen()),\n    status: types.optional(types.enumeration(Object.values(RequestStatus)), RequestStatus.PENDING),\n  })\n    .volatile(() => ({\n      abortController: new AbortController(),\n    }))\n    .views((t) => ({\n      get loading() {\n        return t.status === RequestStatus.PENDING;\n      },\n      get error() {\n        return t.status === RequestStatus.ERROR;\n      },\n    }))\n    .actions((t) => ({\n      fetchData: flow(function* (params?, signal?: AbortSignal) {\n        t.status = RequestStatus.PENDING;\n        try {\n          const res = yield* toGenerator(onQuery(signal ?? t.abortController.signal, params));\n          onResult(t, res);\n          t.status = RequestStatus.SUCCESS;\n        } catch (err) {\n          t.errMsg = err;\n          t.status = RequestStatus.ERROR;\n        }\n      }),\n    }));\n};\n","import { types, ModelProperties, IModelType, cast } from 'mobx-state-tree';\n\nimport { createQueryModel } from './create-query-model';\n\nexport const createListModel = <PROPS extends ModelProperties, OTHERS, CustomC, CustomS>({\n  Item,\n  onQuery,\n  onResult,\n  feildName = 'data',\n}: {\n  Item: IModelType<PROPS, OTHERS, CustomC, CustomS>;\n  onQuery: (signal: AbortSignal, params?: unknown) => Promise<any>;\n  onResult?: (item: any) => void;\n  feildName?: string;\n}) => {\n  return createQueryModel({\n    Model: types.model({\n      total: types.optional(types.number, 0),\n      items: types.optional(types.array(Item), []),\n    }),\n    onQuery,\n    onResult: (t, res) => {\n      t.total = res.total;\n      t.items = cast(res[`${feildName}`].map((i: any) => onResult?.(i) ?? i));\n    },\n  });\n};\n"],"names":[],"mappings":";;;AAKO,MAAM,SAAS,CACpB,OACA,eACA,OAA6B,CAAA,MACb;AACV,QAAA,QAAQ,QAAQ,MAAM;;AAC1B,WAAO,MAAM,OAAO,GAAI,uEAAqB,CAAG,CAAA;AAAA,EAC/C,GAAA,CAAC,OAAO,GAAG,IAAI,CAAC;AAEnB,YAAU,MAAM,MAAM,QAAQ,KAAK,GAAG,CAAC,KAAK,CAAC;AAEtC,SAAA;AACT;ACXa,MAAA,WAAW,CACtB,OACA,WACG;AACH,QAAM,MAAM,OAGT;AAAA,IACD,QAAQ,CAAC;AAAA,EAAA,CACV;AAEK,QAAA,QAAQ,OAAO,KAAK;AAC1B,QAAM,EAAE,cAAc;AAEtB,YAAU,MAAM;AACd,WAAO,MAAM;;AACP,gBAAA,QAAQ,oBAAR,mBAAyB;AAAA,IAAM;AAAA,EAEvC,GAAG,CAAE,CAAA;AAEL,YAAU,MAAM;;AACd,QAAI,CAAC,QAAQ,QAAQ,IAAI,QAAQ,MAAM,GAAG;AACxC,UAAI,QAAQ,SAAS;AACjB,gBAAA,QAAQ,oBAAR,mBAAyB;AACzB,UAAA,QAAQ,kBAAkB,IAAI,gBAAgB;AAClD,gBAAU,IAAI,QAAQ,QAAQ,IAAI,QAAQ,gBAAgB,MAAM;AAAA,IAClE;AAAA,EAAA,GACC,CAAC,MAAM,CAAC;AAEJ,SAAA;AACT;AClCY,IAAA,kCAAA,mBAAL;AACK,iBAAA,aAAA;AACA,iBAAA,aAAA;AACF,iBAAA,WAAA;AAHE,SAAA;AAAA,GAAA,iBAAA,CAAA,CAAA;AAML,MAAM,mBAAmB,CAM9B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,MAKI;AACJ,SAAO,MAAM,MAAM;AAAA,IACjB,QAAQ,MAAM,UAAU,MAAM,QAAQ;AAAA,IACtC,QAAQ,MAAM,SAAS,MAAM,YAAY,OAAO,OAAO,aAAa,CAAC,GAAG,SAAqB;AAAA,EAAA,CAC9F,EACE,SAAS,MAAO;AAAA,IACf,iBAAiB,IAAI,gBAAgB;AAAA,EAAA,EACrC,EACD,MAAM,CAAC,MAAO;AAAA,IACb,IAAI,UAAU;AACZ,aAAO,EAAE,WAAW;AAAA,IACtB;AAAA,IACA,IAAI,QAAQ;AACV,aAAO,EAAE,WAAW;AAAA,IACtB;AAAA,EAAA,EACA,EACD,QAAQ,CAAC,MAAO;AAAA,IACf,WAAW,KAAK,WAAW,QAAS,QAAsB;AACxD,QAAE,SAAS;AACP,UAAA;AACI,cAAA,MAAM,OAAO,YAAY,QAAQ,0BAAU,EAAE,gBAAgB,QAAQ,MAAM,CAAC;AAClF,iBAAS,GAAG,GAAG;AACf,UAAE,SAAS;AAAA,eACJ;AACP,UAAE,SAAS;AACX,UAAE,SAAS;AAAA,MACb;AAAA,IAAA,CACD;AAAA,EACD,EAAA;AACN;AC/CO,MAAM,kBAAkB,CAA0D;AAAA,EACvF;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAY;AAAA,MAMR;AACJ,SAAO,iBAAiB;AAAA,IACtB,OAAO,MAAM,MAAM;AAAA,MACjB,OAAO,MAAM,SAAS,MAAM,QAAQ,CAAC;AAAA,MACrC,OAAO,MAAM,SAAS,MAAM,MAAM,IAAI,GAAG,EAAE;AAAA,IAAA,CAC5C;AAAA,IACD;AAAA,IACA,UAAU,CAAC,GAAG,QAAQ;AACpB,QAAE,QAAQ,IAAI;AACd,QAAE,QAAQ,KAAK,IAAI,GAAG,aAAa,IAAI,CAAC,MAAA;;AAAW,0DAAW,OAAX,YAAiB;AAAA,OAAC,CAAC;AAAA,IACxE;AAAA,EAAA,CACD;AACH;;"}